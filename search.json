[{"title":"ref 屬性：找到 DOM","url":"/2019/07/14/ref/","content":"JSX 元素可以有 ref 屬性\n\n範例：當進入畫面後，希望 input 框是 focus 的狀態\n\n第一種方式：\n官方推薦寫法，匯入 createRef 方法\n\n將方法指定到一個變數 `myInput` 身上，在將變數 `myInput` 指定給 ref\n就能用 `.current` 的方式找到 input\n```jsx\nimport React, { Component, createRef } from \"react\"\n\nclass Input extends Component {\n    // 函式執行後的結果\n    myInput = createRef()\n\n    componentDidMount() {\n        this.myInput.current.focus()\n    }\n    \n    render(){\n        return (\n            <div>\n                <h3>請輸入</h3>\n                <input type=\"text\" ref={this.myInput} />\n            </div>\n        )\n    }\n}\nexport default Input;\n```\n第二種方式：\n傳入一個函式，需要帶入一個參數，參數是元素本身\n```jsx\nimport React, { Component } from \"react\"\n\nclass Input extends Component {\n    setRef = input =>{\n        input.focus()\n    }\n    \n    render(){\n        return (\n            <div>\n                <h3>請輸入</h3>\n                <input type=\"text\" ref={this.setRef} />\n            </div>\n        )\n    }\n}\nexport default Input;\n```\n\n第三種方式：\n傳入一個字串\n```jsx\nimport React, { Component } from \"react\"\n\nclass Input extends Component {\n    componentDidMount() {\n        this.refs.myInput.focus()\n    }\n    \n    render(){\n        return (\n            <div>\n                <h3>請輸入</h3>\n                <input type=\"text\" ref=\"myInput\" />\n            </div>\n        )\n    }\n}\nexport default Input;\n```","tags":["React"]},{"title":"props：上層傳下來的屬性","url":"/2019/07/14/props/","content":"## 入門\n上層傳下來的屬性\n\n將 text 屬性傳給 Item 組件。如果要傳入的值是字串以外(ex.數字)，要用花括弧包起來\n```jsx\n// 上層\nimport React, { Component } from \"react\";\nimport Item from \"./Item\";\nclass List extends Component {\n    render(){\n        return (\n            <ul>\n                <Item text=\"摩斯漢堡\" price={100} />\n                <Item text=\"麥當勞\" />\n                <Item text=\"肯德基\" />\n            </ul>\n        );\n    }\n}\nexport default List;\n```\n利用 `this.props` 拿到上層組件傳進來的 text\n```jsx\n// 下層\nimport React, { Component } from \"react\";\nclass Item extends Component {\n    render(){\n        return <li>{this.props.text}</li>\n    }\n}\nexport default Item;\n```\n\n如果上層組件要傳給子組件的值夾在組件內，子組件可以用 `this.props.children` 取得值\n```jsx\nimport React, { Component } from \"react\";\nimport Item from \"./Item\";\nclass List extends Component {\n    render(){\n        return (\n            <ul>\n                <Item>摩斯漢堡</Item>\n            </ul>\n        );\n    }\n}\nexport default List;\n```\n```jsx\nimport React, { Component } from \"react\";\nclass Item extends Component {\n    render(){\n        return <li>{this.props.children}</li>\n    }\n}\nexport default Item;\n```\n## 進階用法\n### 用 props 指定初始 state\n```jsx\n// 上層\n<Counter initCount={10} />\n\n// 下層\nimport React, { Component } from 'react';\n\nclass Counter extends Component {\n    // 來自上層 props 傳入的 state\n    constructor(props){\n        super(props);\n        this.state = {\n            count: props.initCount\n        }\n    }\n\n    addCount = ()=>{\n        this.setState({\n            count: this.state.count + 1\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>{this.state.count}</h1>\n                <button onClick={this.addCount}>+1</button>\n            </div>\n        );\n    }\n}\n\nexport default Counter;\n```\n### 用 defaultProps 指定預設 props\n當子組件已經定義來自上層傳來的預設值時，而上層組件又忘了給初始值，這時子組件的 `props.initCount` 會是 undefined 而導致程式出錯\n\n為了避免這種錯誤，可以用 defaultProps 指定子組件的初始預設值，有兩種寫法，一個可以在組件內指定\n```jsx\n<Counter />\n\n// 下層\nimport React, { Component } from 'react';\n\nclass Counter extends Component {\n    // 在組件內當作 static\n    static defaultProps = {\n        initCount: 3\n    }\n\n    constructor(props){\n        super(props);\n        this.state = {\n            count: props.initCount\n        }\n    }\n\n    addCount = ()=>{\n        this.setState({\n            count: this.state.count + 1\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>{this.state.count}</h1>\n                <button onClick={this.addCount}>+1</button>\n            </div>\n        );\n    }\n}\n\nexport default Counter;\n```\n或是在組件外\n```jsx\nCounter.defaultProps = {\n    initCount: 7\n}\n```\n### 用 propTypes 檢查 props 型別\n假設今天的上下層組件是由不同人分工完成，上層組件給了一個字串 10，在子組件當作上層給個是數字直接拿來做運算，會發生字串相加的問題\n```jsx\n// 字串 10\n<Counter initCount=\"10\" />\n\n// 數字 10\n<Counter initCount={10} />\n```\n這時可以在子組件用 propTypes 驗證上層傳來 props 的型別，有兩種寫法\n```jsx\nclass Counter extends Component {\n    static propTypes = {\n        initCount: PropTypes.number\n    }\n}\nexport default Counter;\n```\n```jsx\nimport PropTypes from 'prop-types';\n// 要再組件外\nCounter.propTypes = {\n    initCount: PropTypes.number\n}\n```\n當 props 傳來的屬性不匹配時，就會報錯\n","tags":["React"]},{"title":"export 與 import","url":"/2019/07/14/export/","content":"ES6 所提供能更模組化管理程式碼的語法\n\n## export\n匯出的 import 的名字不一定要一致，可以直接更名\n```javascript\n// user.js\nconst member = {\n    name: 'Amy',\n    age: 20\n}\n\nexport default amy;\n```\n\n```javascript\n// 任一 js\nimport m from './user'\n\nconsole.log(m.age) // 20\n```\n\n## named export\n匯出的 import 名字要一致\n```javascript\n// user.js\nexport const boss = {\n    name: 'Boss',\n    age: 38\n}\n```\n\n```javascript\n// 任一 js\nimport { boss } from './user'\n\nconsole.log(boss.age) // 38\n```\nnamed export 匯出的 import 想另外取名的話，要加上 `as`\n```javascript\nimport { boss as b } from './user'\n```\n\n\n\n\n","tags":["JS"]},{"title":"解構賦值 object destructuring","url":"/2019/07/14/ES6解構賦值/","content":"## 陣列解構賦值\n陣列的解構賦值強調的是順序\n```javascript\nconst point = [1, 2, 3]\n\n/*\n原來的寫法\nconst x = point[0]\nconsole.log(x) // 1\n*/\n\n//解構賦值\nconst [x, y, z] = point\nconst [x] = point // 同等於 const x = point[0]\nconsole.log(x) // 1\n\nconst [x, ...more] = point\nconsole.log(more) // more [2, 3]\n```\n在陣列解構賦值中，可以接受下面這樣的寫法：\n```javascript\nconst [x, , z] = [1, 2, 3];\nconsole.log(x); // 1\nconsole.log(z); // 3\n```\n在物件中則不行\n## 物件解構賦值\n物件的解構賦值強調的是屬性名稱，屬性名稱必須相互對應才能夠取得到值\n```javascript\nconst point = { x: 1, y: 2, z: 3 }\n\n/*\n原來的寫法\nconst x = point.x\nconsole.log(x) // 1\n*/\n\n//解構賦值\nconst { x, y, z } = point\nconst { x } = point // 同等於 const x = point.x\nconsole.log(x) // 1\nconst { x, ...more } = point\n// more { y: 2,z: 3 } \n```\n重新命名\n```javascript\nconst point = { x: 1, y: 2, z: 3 }\nconst { x: ax } = point\nconsole.log(ax) // 1\n```\n## 預設值\n```javascript\nconst point = { x: 1, y: 2, z: 3 }\n\nconst { w = 0 } = point\n// 這樣要是 point 沒有 w ，預設值會是 0 而不是 undefined\n```\n## 物件解構賦值的用途\n快速提取 JSON 數據\n```javascript\nconst data = {\n  id: 74,\n  name: \"Amy\",\n  country: \"Taiwan\",\n  age: 18\n}\n\nconst { id, name, country, age } = data;\nconsole.log(id); // 74\n```","tags":["JS"]},{"title":"組件狀態：state 與 setState","url":"/2019/07/14/state組件狀態/","content":"setState 傳入的物件是部分狀態，不想改變的 state 不要傳入就好，當呼叫 setState 後組件會重新渲染\n```jsx\nimport React, { Component } from \"react\";\n\nclass Message extends Component {\n\tstate = {\n\t\ttitle: 'Message',\n\t\ttext: \"Hello\"\n\t};\n\n\tsayHi = () => {\n\t\tthis.setState({\n\t\t\ttext: 'Hi'\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t<div>\n\t\t\t<h1>{this.state.title}</h1>\n\t\t\t<h2>{this.state.text}</h2>\n\t\t\t<button onClick={this.sayHi}>Say Hi</button>\n\t\t</div>\n\t\t);\n\t}\n}\n```\n","tags":["React"]},{"title":"React 組件入門","url":"/2019/07/14/react組件入門/","content":"\n## 組件入門\n\n```jsx\nimport React from \"react\";\nclass App extends React.Component {\n\trender() {\n\t\treturn <h1>Hello</h1>;\n\t}\n}\nexport default App;\n```\n\n從 react 匯入 Component 可以直接繼承 Component\n\n```jsx\nimport React, { Component } from \"react\";\nclass App extends Component {\n\trender() {\n\t\treturn <h1>Hello</h1>;\n\t}\n}\nexport default App;\n```\n\n新增另一組件，並匯入組件\n\n```jsx\n// App 組件\nimport React, { Component } from \"react\";\nimport Header from \"./Header\";\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Header />\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;\n```\n\n```jsx\n// Header 組件\nimport React, { Component } from \"react\";\nclass Header extends Component {\n\trender() {\n\t\treturn <h1>Hello</h1>;\n\t}\n}\nexport default Header;\n```\n\n## 組件裡面有什麼\n1.一定會有 render 函式，且要 return 一個元素，return 最外層一定要包一個元素 \n2.生命週期函式 \n3.自定義函式\n4.state \n5.靜態屬性 static propTypes、靜態方法 static getDerivedStateFromProps\n\n## 組件的自訂函式\n自訂函式有兩種宣告方式\n1.一般函式，要再 constructor 另外綁定 this\n```jsx\nimport React, { Component } from 'react';\n\nclass Counter extends Component {\n    state = {\n        count: 0\n    }\n    \n    constructor(props){\n        super(props);\n        this.addCount = this.addCount.bind(this);\n    }\n\n    addCount(){\n        this.setState({\n            count: this.state.count + 1\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>{this.state.count}</h1>\n                <button onClick={this.addCount}>+1</button>\n            </div>\n        );\n    }\n}\n\nexport default Counter;\n```\n2.箭頭函式\n```jsx\nimport React, { Component } from 'react';\n\nclass Counter extends Component {\n    state = {\n        count: 0\n    }\n\n    addCount = ()=>{\n        this.setState({\n            count: this.state.count + 1\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>{this.state.count}</h1>\n                <button onClick={this.addCount}>+1</button>\n            </div>\n        );\n    }\n}\n\nexport default Counter;\n```","tags":["React"]},{"title":"render 把組件呈現到畫面上","url":"/2019/07/14/render/","content":"`ReactDOM.render(React DOMElement, container: element)`\n將一個 react 元素渲染到根 DOM 節點中，只需把它們一起傳入 ReactDOM.render()\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\"; // 將 react 掛載至 DOM\nimport App from './App';\n\n// App 是一個組件，型態是 class\n// <App /> 是一個元素，型態是 object\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n```","tags":["React"]},{"title":"JSX","url":"/2019/07/14/jsx/","content":"JSX 是 react 發明，要讓 react 在 js 程式裡定義類似於 HTML 的模板，有以下特點：\n\n1.一定要有 close tag\n```jsx\n// 一般在HTML這樣是不會報錯的，JSX 物件內會報錯\n<input type=\"text\">\n// JSX 內正確寫法\n<input type=\"text\" />\n```\n2.所有 tag 都可以 self close\nJSX 允許沒有包任何元素的 tag 縮寫成 self close\n```jsx\n<div className=\"wrap\"></div>\n<div className=\"wrap\" />\n\n<App></App>\n<App />\n```\n3.className/htmlFor\n```jsx\n<div className=\"App\">\n    <label htmlFor=\"check\">check</label>\n    <input type=\"checkbox\" id=\"check\" />\n</div>\n```\n4.事件以駝峰式命名\n```jsx\n<button onClick={onSubmit}>送出</button>\n```\n5.在 HTML裡面給字串；JSX 物件給花括號`{}`，`{}`可以包住一個值或是表達式\n```jsx\n// HTML\n<button onclick=\"onSubmit\">送出</button>\n// JSX\n<button onClick={onSubmit}>{text}</button>\n```","tags":["React"]},{"title":"Hexo 安裝與使用","url":"/2019/07/13/hexo/","content":"## 安裝\n建立一個專案資料夾，並打開終端機\n\n```\n# 安装 Hexo\nnpm install -g hexo-cli\n\n# 初始化 Hexo\nhexo init <fileName>\n\ncd <fileName>\n\n# 安裝 Hexo Git (部署文章用)\nnpm install hexo-deployer-git --save\n```\n\n## 修改配置\n開啟 `_config.yml`，新增以下關於 github 帳號的設定：\n\n**url**: https://[github帳號].github.io\n```\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://amy123.com\n```\n**repository**: http://github.com/[你的github帳號]/[你的github帳號].github.io.git\n```\ndeploy:\n    type: git\n    repository: http://github.com/amy123/amy123.github.io.git\n    branch: master\n```\n\n## 新增文章\n`hexo new <文章名稱>`\n命名規則為 kebab Case，單字與單字間使用連接符號\n```\nhexo new hexo-document\n```\n\n## 常用語法\n本機預覽結果\n```\nhexo s\n```\n\n產生靜態頁面\n```\nhexo g\n```\n\n佈署文章至 github\n```\nhexo d\n```\n[官方說明頁](https://hexo.io/docs/deployment.html)","tags":["Hexo"]},{"title":"Visual Studio Code 常用套件與設定","url":"/2019/07/13/vscode常用套件/","content":"Atom One Dark Theme：Atom 主題\nPrettier-Code formtter：程式碼對齊\ngit-autoconfig：可綁定多組帳號，打開專案時會詢問要以哪個身分進行\ngitflow: gitflow 配置\ngitignore:\nindent-rainbow：程式碼排列顏色提示\nLive Sass Compiler：Live sass/scss 樣式編譯\nLive Server：Live 編譯\nPath Intellisense：路徑\nESLint\nVetur\nvscode-icons\nChinese (Traditional) Language Pack for Visual Studio Code\n\n```json\n{\n\t\"editor.fontSize\": 16,\n\t\"typescript.locale\": \"zh-TW\",\n\t\"workbench.colorTheme\": \"Atom One Dark\",\n\t\"workbench.iconTheme\": \"vscode-icons\",\n\t\"terminal.integrated.shell.windows\": \"C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe\",\n\t\"window.zoomLevel\": 1,\n\t\"editor.tabSize\": 4,\n\t\"emmet.triggerExpansionOnTab\": true,\n\t\"git-autoconfig.configList\": [\n\t\t{\n\t\t\"user.name\": \"elissa\",\n\t\t\"user.email\": \"syue1018@hotmail.com\"\n\t\t}\n\t],\n\t\"editor.formatOnSave\": false,\n\t\"[javascript]\": {\n\t\t\"editor.formatOnSave\": true\n\t}\n}\n```","tags":["Visual Studio Code"]}]