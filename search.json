[{"title":"export 與 import","url":"/2019/07/14/export/","content":"ES6 所提供能更模組化管理程式碼的語法\n\n## export\n匯出的 import 的名字不一定要一致，可以直接更名\n```javascript\n// user.js\nconst member = {\n  name: 'Amy',\n  age: 20\n}\n\nexport default amy;\n```\n\n```javascript\n// 任一 js\nimport m from './user'\n\nconsole.log(m.age) // 20\n```\n\n## named export\n匯出的 import 名字要一致\n```javascript\n// user.js\nexport const boss = {\n  name: 'Boss',\n  age: 38\n}\n```\n\n```javascript\n// 任一 js\nimport { boss } from './user'\n\nconsole.log(boss.age) // 38\n```\nnamed export 匯出的 import 想另外取名的話，要加上 `as`\n```javascript\nimport { boss as b } from './user'\n```\n\n\n\n\n","tags":["JS"]},{"title":"解構賦值 object destructuring","url":"/2019/07/14/解構賦值/","content":"## 陣列解構賦值\n陣列的解構賦值強調的是順序\n```javascript\nconst point = [1, 2, 3]\n\n/*\n原來的寫法\nconst x = point[0]\nconsole.log(x) // 1\n*/\n\n//解構賦值\nconst [x, y, z] = point\nconst [x] = point // 同等於 const x = point[0]\nconsole.log(x) // 1\n\nconst [x, ...more] = point\nconsole.log(more) // more [2, 3]\n```\n在陣列解構賦值中，可以接受下面這樣的寫法：\n```javascript\nconst [x, , z] = [1, 2, 3];\nconsole.log(x); // 1\nconsole.log(z); // 3\n```\n在物件中則不行\n## 物件解構賦值\n物件的解構賦值強調的是屬性名稱，屬性名稱必須相互對應才能夠取得到值\n```javascript\nconst point = { x: 1, y: 2, z: 3 }\n\n/*\n原來的寫法\nconst x = point.x\nconsole.log(x) // 1\n*/\n\n//解構賦值\nconst { x, y, z } = point\nconst { x } = point // 同等於 const x = point.x\nconsole.log(x) // 1\nconst { x, ...more } = point\n// more { y: 2,z: 3 } \n```\n重新命名\n```javascript\nconst point = { x: 1, y: 2, z: 3 }\nconst { x: ax } = point\nconsole.log(ax) // 1\n```\n## 預設值\n```javascript\nconst point = { x: 1, y: 2, z: 3 }\n\nconst { w = 0 } = point\n// 這樣要是 point 沒有 w ，預設值會是 0 而不是 undefined\n```\n## 物件解構賦值的用途\n快速提取 JSON 數據\n```javascript\nconst data = {\n  id: 74,\n  name: \"Amy\",\n  country: \"Taiwan\",\n  age: 18\n}\n\nconst { id, name, country, age } = data;\nconsole.log(id); // 74\n```","tags":["JS"]},{"title":"Hexo 安裝與使用","url":"/2019/07/13/hexo/","content":"## 安裝\n建立一個專案資料夾，並打開終端機\n\n```\n# 安装 Hexo\nnpm install -g hexo-cli\n\n# 初始化 Hexo\nhexo init <fileName>\n\ncd <fileName>\n\n# 安裝 Hexo Git (部署文章用)\nnpm install hexo-deployer-git --save\n```\n\n## 修改配置\n開啟 `_config.yml`，新增以下關於 github 帳號的設定：\n\n**url**: https://[github帳號].github.io\n```\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://amy123.com\n```\n**repository**: http://github.com/[你的github帳號]/[你的github帳號].github.io.git\n```\ndeploy:\n  type: git\n  repository: http://github.com/amy123/amy123.github.io.git\n  branch: master\n```\n\n## 新增文章\n`hexo new <文章名稱>`\n命名規則為 kebab Case，單字與單字間使用連接符號\n```\nhexo new hexo-document\n```\n\n## 常用語法\n本機預覽結果\n```\nhexo s\n```\n\n產生靜態頁面\n```\nhexo g\n```\n\n佈署文章至 github\n```\nhexo d\n```\n[官方說明頁](https://hexo.io/docs/deployment.html)","tags":["Hexo"]},{"title":"Visual Studio Code 常用套件","url":"/2019/07/13/常用套件/","content":"Atom One Dark Theme：Atom 主題\nPrettier-Code formtter：程式碼對齊\ngit-autoconfig：可綁定多組帳號，打開專案時會詢問要以哪個身分進行\ngitflow: gitflow 配置\ngitignore:\nindent-rainbow：程式碼排列顏色提示\nLive Sass Compiler：Live sass/scss 樣式編譯\nLive Server：Live 編譯\nPath Intellisense：路徑\nESLint\nVetur\nvscode-icons\nChinese (Traditional) Language Pack for Visual Studio Code","tags":["Visual Studio Code"]}]